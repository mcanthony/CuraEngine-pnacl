# Set the default target to patch CuraEngine before building
build: .patch all

# Patch some files
.PHONY: .patch
.patch: CuraEngine
	sed -i 's/int main(/int nacl_cura_engine_main(/g' CuraEngine/main.cpp
	sed -i 's/limits.h/climits/g' CuraEngine/utils/intpoint.h

#  Get the CuraEngine submodule
CuraEngine:
	git submodule update
	git submodule init

VALID_TOOLCHAINS := pnacl

NACL_SDK_ROOT ?= /opt/nacl_sdk/pepper_32
include $(NACL_SDK_ROOT)/tools/common.mk

TARGET = cura_engine
DEPS = ppapi_simple nacl_io ppapi_cpp
LIBS = $(DEPS) ppapi pthread

CFLAGS = -ICuraEngine -Wall -Wextra -O3 -Wno-return-type -Wno-unused-parameter -Wno-format-security
SOURCES = cura_engine.cc CuraEngine/main.cpp CuraEngine/settings.cpp CuraEngine/modelFile/modelFile.cpp CuraEngine/clipper/clipper.cpp


# Build rules generated by macros from common.mk:

$(foreach dep,$(DEPS),$(eval $(call DEPEND_RULE,$(dep))))
$(foreach src,$(SOURCES),$(eval $(call COMPILE_RULE,$(src),$(CFLAGS))))

ifeq ($(CONFIG),Release)
$(eval $(call LINK_RULE,$(TARGET)_unstripped,$(SOURCES),$(LIBS),$(DEPS)))
$(eval $(call STRIP_RULE,$(TARGET),$(TARGET)_unstripped))
else
$(eval $(call LINK_RULE,$(TARGET),$(SOURCES),$(LIBS),$(DEPS)))
endif

$(eval $(call NMF_RULE,$(TARGET),))
